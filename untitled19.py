# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14ZofWvZ959UcQ7Sc4u-mFU7vfBnWhTDZ
"""

import pandas as pd

pip install python-dotenv

import requests
import base64
from dotenv import load_dotenv
import os

CLIENT_ID = ''
CLIENT_SECRET = ''

def get_access_token(client_id, client_secret):
    """Authenticate with the Spotify API and return an access token."""
    auth_url = 'https://accounts.spotify.com/api/token'
    auth_response = requests.post(auth_url, {
        'grant_type': 'client_credentials',
        'client_id': client_id,
        'client_secret': client_secret,
    })
    auth_response_data = auth_response.json()
    return auth_response_data.get('access_token')

def get_album_cover(album_name, access_token):
    """Search for an album by name and return its cover art URL."""
    search_url = 'https://api.spotify.com/v1/search'
    headers = {
        'Authorization': f'Bearer {access_token}'
    }
    params = {
        'q': album_name,
        'type': 'album',
        'limit': 1
    }
    response = requests.get(search_url, headers=headers, params=params)
    response_data = response.json()
    albums = response_data.get('albums', {}).get('items', [])
    if albums:
        return albums[0]['images'][0]['url']  # Returning the URL of the first image (usually the largest)
    else:
        return None

def update_album_covers(csv_file_path):
    """Update the CSV file with album cover URLs."""
    df = pd.read_csv("/spotify-2023.csv")
    access_token = get_access_token(CLIENT_ID, CLIENT_SECRET)

    # Assuming the column with album names is called 'Album Name'
    df['Album Cover URL'] = df['Album Name'].apply(lambda x: get_album_cover(x, access_token))

    # Save the updated DataFrame to a new CSV file
    updated_csv_path = csv_file_path.replace('.csv', '-updated.csv')
    df.to_csv(updated_csv_path, index=False)
    print(f"Updated CSV saved to {updated_csv_path}")

if __name__ == "__main__":
    csv_file_path = '/spotify-2023.csv'  # Replace this with the path to your CSV file
    update_album_covers("/spotify-2023.csv")

import pandas as pd
import requests

CLIENT_ID = ''
CLIENT_SECRET = ''

def get_access_token(client_id, client_secret):
    auth_url = 'https://accounts.spotify.com/api/token'
    auth_response = requests.post(auth_url, {
        'grant_type': 'client_credentials',
        'client_id': client_id,
        'client_secret': client_secret,
    })
    auth_response_data = auth_response.json()
    return auth_response_data.get('access_token')

def get_album_cover(album_name, access_token):
    search_url = 'https://api.spotify.com/v1/search'
    headers = {'Authorization': f'Bearer {access_token}'}
    params = {'q': album_name, 'type': 'album', 'limit': 1}
    response = requests.get(search_url, headers=headers, params=params)
    response_data = response.json()
    albums = response_data.get('albums', {}).get('items', [])
    if albums:
        return albums[0]['images'][0]['url']
    else:
        return None

def update_album_covers(csv_file_path):
    # Try changing the encoding here to 'ISO-8859-1' or 'windows-1252' if 'utf-8' does not work
    df = pd.read_csv("/spotify-2023.csv", encoding='ISO-8859-1')
    access_token = get_access_token(CLIENT_ID, CLIENT_SECRET)

    df['Album Cover URL'] = df['Album Name'].apply(lambda x: get_album_cover(x, access_token))

    updated_csv_path = csv_file_path.replace('.csv', '-updated.csv')
    df.to_csv(updated_csv_path, index=False)
    print(f"Updated CSV saved to {updated_csv_path}")

if __name__ == "__main__":
    # Be sure to provide the correct path to your CSV file
    csv_file_path = '/spotify-2023.csv'  # Update this path
    update_album_covers(csv_file_path)
